import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# summarize history for accuracy and loss
def plot_history_accuracy_loss(model_history, n = 1):
    plt.figure(n)
    plt.plot(model_history.history['accuracy'])
    plt.plot(model_history.history['val_accuracy'])
    plt.title('model accuracy')
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')

    # summarize history for loss
    plt.plot(model_history.history['loss'])
    plt.plot(model_history.history['val_loss'])
    plt.title('model loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')

def plot(x, y,button, n,title="accelerometer"):
    fig = plt.figure(n)
    plt.plot(x, y)
    fig.suptitle(title, fontsize=20)
    plt.xlabel('timestamp (ms)')
    plt.ylabel('acceleration (m⋅s−2)')
    #plt.show()

def plot_values_and_button(x1, y1, x2, y2, n,title="accelerometer"):
    fig = plt.figure(n)
    fig.suptitle(title, fontsize=20)
    plt.grid(True)
    #plt.scatter(x1[0], y2[0], c='red')
    #plt.axvline(0, c='red', label='button')
    # plot accelerometer values
    plt.plot(x2, y2, linestyle='--',color= 'b',label='accelerometer')

    # plot lines when a button is pressed
    for x in x1 :
        plt.axvline(x)

    # plot what button is pressed
    plt.plot(x1, y1, 'r')

    plt.legend( loc='upper left', borderaxespad=0.)
    plt.xlabel('timestamp (ms)')
    plt.ylabel('acceleration (m⋅s−2)')
    plt.show()


def plot_values_and_real_and_predicted_buttons(predicted_category= None, time_real_button=None, real_button=None, time=None, y2=None, n=1,title="accelerometer", window_samples = 6):
    fig = plt.figure(n)
    fig.suptitle(title, fontsize=20)
    plt.grid(True)
    #plt.scatter(real_button[0], y2[0], c='red')
    #plt.axvline(0, c='red', label='button')
    # plot accelerometer values
    if time:
        plt.plot(time, y2,label='accelerometer')

    # plot lines when a button is pressed
    # if time_real_button: 
    #     for x in time_real_button :
    #         plt.axvline(x)

    # plot what real button is pressed
    plt.plot(time_real_button, real_button,label='real button pressed')

    # plot what predicted button is pressed
    time_predicted = time[window_samples//2:-window_samples//2+1]
    time_predicted_button = [time_predicted[k] for k in range(len(time_predicted)) if predicted_category[k] != 0] #[p != 0 for p in predicted_category
    predicted_button = [p for p in predicted_category if p!=0]#predicted_category[p != 0 for p in predicted_category
    plt.plot(time_predicted_button, predicted_button, label="predicted button pressed")

    plt.legend( loc='bottom left', borderaxespad=0.)
    plt.xlabel('timestamp (ms)')
    plt.ylabel('acceleration (m⋅s−2)')
    plt.show()

def plot3d(x, y, z):
    mpl.rcParams['legend.fontsize'] = 10

    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.plot(x, y, z, label='parametric curve')
    ax.legend()

    plt.show()


#accelerometerRecord, buttonRecord,gyroscopeRecord = getData()
#plot3d(accelerometerRecord[1], accelerometerRecord[2], accelerometerRecord[3])

# plot(buttonRecord[0],buttonRecord[1])
#plot( accelerometerRecord[0], accelerometerRecord[1], 1,filename+' X')
#plot( accelerometerRecord[0], accelerometerRecord[2], 2, filename+' Y')
#plot( accelerometerRecord[0], accelerometerRecord[3], 3,filename+' Z')
#plot2(buttonRecord[0], buttonRecord[1], accelerometerRecord[0], accelerometerRecord[1], 1,filename+' X')
#plot2(buttonRecord[0], buttonRecord[1], accelerometerRecord[0], accelerometerRecord[2], 2,filename+' Y')
#plot2(buttonRecord[0], buttonRecord[1], accelerometerRecord[0], accelerometerRecord[3], 3,filename+' Z')
#plot2(buttonRecord[0], buttonRecord[1], gyroscopeRecord[0], gyroscopeRecord[1], 1,filename+' X')
#plot2(buttonRecord[0], buttonRecord[1], gyroscopeRecord[0], gyroscopeRecord[2], 2,filename+' Y')
#plot2(buttonRecord[0], buttonRecord[1], gyroscopeRecord[0], gyroscopeRecord[3], 3,filename+' Z')


#plt.show()
#getDb()